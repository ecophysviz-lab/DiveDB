"""
Test Data Uploader

Tests generated by Claude 4 Sonnet.
"""

import pytest
import tempfile
import xarray as xr
import numpy as np
import pandas as pd
from DiveDB.services.data_uploader import DataUploader
from DiveDB.services.data_uploader import NetCDFValidationError
from DiveDB.services.duck_pond import DuckPond


@pytest.fixture
def valid_netcdf_dataset():
    time_samples = pd.date_range("2023-01-01", periods=5, freq="D")
    variable_labels = ["label1", "label2"]

    ds = xr.Dataset(
        {
            "data_var1": (("sensor_samples",), np.random.rand(5)),
            "data_var2": (
                ("sensor_samples", "sensor_variables"),
                np.random.rand(5, 2),
            ),
        },
        coords={
            "sensor_samples": ("sensor_samples", time_samples),
            "sensor_variables": ("sensor_variables", variable_labels),
        },
    )

    # Set the necessary attributes
    ds["data_var1"].attrs["variable"] = "example_variable"
    ds["data_var2"].attrs["variables"] = ["label1", "label2"]

    return ds


@pytest.fixture
def temp_warehouse():
    """Create a temporary directory for Iceberg warehouse"""
    with tempfile.TemporaryDirectory() as temp_dir:
        yield temp_dir


@pytest.fixture
def duck_pond(temp_warehouse):
    """Create a DuckPond instance for testing"""
    return DuckPond(warehouse_path=temp_warehouse)


class TestDataUploaderConstructor:
    """DataUploader Constructor Changes"""

    def test_constructor_with_default_duck_pond(self, monkeypatch, temp_warehouse):
        """Test DataUploader constructor creates DuckPond with environment variable"""
        # Set the environment variable
        monkeypatch.setenv("LOCAL_ICEBERG_PATH", temp_warehouse)

        # Create DataUploader - should create DuckPond automatically
        uploader = DataUploader()

        # Verify DuckPond was created
        assert uploader.duck_pond is not None
        assert isinstance(uploader.duck_pond, DuckPond)
        assert uploader.duck_pond.warehouse_path == temp_warehouse

    def test_constructor_with_default_fallback(self):
        """Test DataUploader constructor falls back to default path when env var not set"""
        # Create DataUploader without setting environment variable
        uploader = DataUploader()

        # Verify DuckPond was created with default path
        assert uploader.duck_pond is not None
        assert isinstance(uploader.duck_pond, DuckPond)
        assert uploader.duck_pond.warehouse_path == "./local_iceberg_warehouse"

    def test_constructor_with_provided_duck_pond(self, duck_pond):
        """Test DataUploader constructor with explicitly provided DuckPond"""
        # Create DataUploader with provided DuckPond
        uploader = DataUploader(duck_pond=duck_pond)

        # Verify the provided DuckPond is used
        assert uploader.duck_pond is duck_pond
        assert isinstance(uploader.duck_pond, DuckPond)

    def test_constructor_maintains_notion_functionality(self, duck_pond):
        """Test that Notion integration still works with new constructor"""
        # Test with no Notion config
        uploader = DataUploader(duck_pond=duck_pond)
        assert uploader.notion_manager is None

        # Test with notion_manager parameter
        from unittest.mock import Mock

        mock_notion_manager = Mock()
        uploader = DataUploader(duck_pond=duck_pond, notion_manager=mock_notion_manager)
        assert uploader.notion_manager is mock_notion_manager

        # Test with notion_config parameter
        notion_config = {"db_map": {"test": "test_id"}, "token": "test_token"}
        uploader = DataUploader(duck_pond=duck_pond, notion_config=notion_config)
        assert uploader.notion_manager is not None


def test_validate_data_valid(valid_netcdf_dataset, duck_pond):
    """Test NetCDF validation with valid data"""
    uploader = DataUploader(duck_pond=duck_pond)
    ds = valid_netcdf_dataset
    assert uploader.validate_netcdf(ds)


def test_validate_data_invalid(valid_netcdf_dataset, duck_pond):
    """Test NetCDF validation with invalid data"""
    uploader = DataUploader(duck_pond=duck_pond)
    ds = valid_netcdf_dataset
    ds = ds.rename({"sensor_samples": "sensor"})

    with pytest.raises(NetCDFValidationError):
        uploader.validate_netcdf(ds)
